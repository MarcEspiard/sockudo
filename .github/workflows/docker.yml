name: Docker - Build and Push Images

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
  
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'Dockerfile*'
  
  schedule:
    # Rebuild weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  
  workflow_dispatch:
    inputs:
      push_latest:
        description: 'Push as latest tag'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  # =============================================================================
  # Build and Push Docker Images
  # =============================================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get repository name in lowercase
        id: repo
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}
            sockudo/sockudo
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push to GitHub Container Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push to Docker Hub
        if: github.event_name != 'pull_request' && vars.DOCKERHUB_USERNAME != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            sockudo/sockudo:${{ github.ref_name }}
            ${{ github.ref == 'refs/heads/main' && 'sockudo/sockudo:latest' || '' }}
          cache-from: type=gha

  # =============================================================================
  # Test Docker Image
  # =============================================================================
  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: sockudo:test
          cache-from: type=gha

      - name: Test basic functionality
        run: |
          echo "Testing Docker image functionality..."
          
          # Start container
          docker run -d --name sockudo-test \
            --network host \
            -e RUST_LOG=info \
            -e DATABASE_REDIS_HOST=localhost \
            -e DATABASE_REDIS_PORT=6379 \
            -e SOCKUDO_DEFAULT_APP_ENABLED=true \
            sockudo:test
          
          # Wait for startup
          sleep 15
          
          # Test health endpoint
          if curl -f http://localhost:6001/up/demo-app; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            docker logs sockudo-test
            exit 1
          fi
          
          # Test metrics endpoint
          if curl -f http://localhost:9601/metrics > /dev/null; then
            echo "✅ Metrics endpoint accessible"
          else
            echo "❌ Metrics endpoint failed"
            docker logs sockudo-test
            exit 1
          fi
          
          echo "✅ All tests passed!"

      - name: Cleanup
        if: always()
        run: |
          docker stop sockudo-test || true
          docker rm sockudo-test || true

  # =============================================================================
  # Security Scan
  # =============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Get repository name in lowercase
        id: repo
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'